import { useState, useEffect } from 'react';
import { useInstance } from '../contexts/InstanceContext';
import { useAuth } from '../contexts/AuthContext';
import { ChatDetails } from '../lib/wapi/types';
import { 
  Users, 
  Settings, 
  Search, 
  RefreshCw,
  Grid3x3,
  List,
  Tag,
  Mail,
  Phone,
  FileText
} from 'lucide-react';
import { cn } from '../lib/utils';
import toast from 'react-hot-toast';

// Servi√ßos
import {
  getLeads,
  updateLead,
  getLeadFieldConfig,
  saveLeadFieldConfig,
  getLeadStats,
  syncLeadFromWhatsApp,
  type Lead as SupabaseLead,
  type LeadFieldConfig as LeadFieldConfigType,
  type LeadStats
} from '../services/supabase-leads';

// Modais
import { LeadFieldsConfigModal, LeadDetailsModal } from '../components/leads';
import { SelectInstanceModal } from '../components/instance/SelectInstanceModal';

interface LeadFieldsConfig {
  lead_field01?: string;
  lead_field02?: string;
  lead_field03?: string;
  lead_field04?: string;
  lead_field05?: string;
  lead_field06?: string;
  lead_field07?: string;
  lead_field08?: string;
  lead_field09?: string;
  lead_field10?: string;
  lead_field11?: string;
  lead_field12?: string;
  lead_field13?: string;
  lead_field14?: string;
  lead_field15?: string;
  lead_field16?: string;
  lead_field17?: string;
  lead_field18?: string;
  lead_field19?: string;
  lead_field20?: string;
}

interface Lead extends ChatDetails {
  // Herda todos os campos de ChatDetails
}

type ViewMode = 'grid' | 'list' | 'kanban';

const DEFAULT_STATUSES = ['novo', 'qualificado', 'negociacao', 'ganho', 'perdido'];

export function LeadsPage() {
  const { user } = useAuth();
  const { selectedInstance, instances, setSelectedInstance, showInstanceModal, setShowInstanceModal } = useInstance();
  const instanceId = selectedInstance?.id;
  const instanceToken = selectedInstance?.token;
  
  // Estados principais
  const [leads, setLeads] = useState<Lead[]>([]);
  const [loading, setLoading] = useState(true);
  const [viewMode, setViewMode] = useState<ViewMode>('grid');
  
  // Configura√ß√£o de campos personalizados
  const [fieldsConfig, setFieldsConfig] = useState<LeadFieldsConfig>({});
  const [showFieldsConfigModal, setShowFieldsConfigModal] = useState(false);
  
  // Filtros e busca
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('');
  
  // Modal de detalhes do lead
  const [selectedLead, setSelectedLead] = useState<Lead | null>(null);
  const [showLeadDetailsModal, setShowLeadDetailsModal] = useState(false);
  
  // Estat√≠sticas
  const [stats, setStats] = useState<LeadStats>({
    total: 0,
    novo: 0,
    qualificado: 0,
    negociacao: 0,
    ganho: 0,
    perdido: 0
  });

  // Carregar configura√ß√£o de campos do Supabase
  useEffect(() => {
    if (user?.id && instanceId) {
      loadFieldsConfig();
    }
  }, [user?.id, instanceId]);

  // Carregar leads
  useEffect(() => {
    if (user?.id && instanceId && instanceToken) {
      loadLeads();
    }
  }, [user?.id, instanceId, instanceToken, statusFilter]);

  // =====================================================
  // FUN√á√ïES - CONFIGURA√á√ÉO DE CAMPOS
  // =====================================================

  const loadFieldsConfig = async () => {
    if (!user?.id || !instanceId) return;
    
    try {
      console.log('üîß Carregando configura√ß√£o de campos do Supabase');
      const config = await getLeadFieldConfig(user.id, instanceId);
      
      if (config) {
        // Converter formato do Supabase para o formato do componente
        const fieldsMap: LeadFieldsConfig = {};
        for (let i = 1; i <= 20; i++) {
          const fieldKey = `lead_field_${i.toString().padStart(2, '0')}` as keyof typeof config;
          const value = config[fieldKey];
          if (value) {
            fieldsMap[fieldKey as keyof LeadFieldsConfig] = value;
          }
        }
        setFieldsConfig(fieldsMap);
      }
    } catch (error) {
      console.error('‚ùå Erro ao carregar configura√ß√£o de campos:', error);
    }
  };

  const handleSaveFieldsConfig = async (config: LeadFieldsConfig) => {
    if (!user?.id || !instanceId) return;
    
    try {
      console.log('üíæ Salvando configura√ß√£o de campos no Supabase');
      
      await saveLeadFieldConfig(user.id, instanceId, config);
      setFieldsConfig(config);
      
      toast.success('Configura√ß√£o de campos salva com sucesso!');
      setShowFieldsConfigModal(false);
    } catch (error: any) {
      console.error('‚ùå Erro ao salvar configura√ß√£o:', error);
      toast.error('Erro ao salvar configura√ß√£o: ' + (error.message || 'Erro desconhecido'));
    }
  };

  // =====================================================
  // FUN√á√ïES - LEADS
  // =====================================================

  const loadLeads = async () => {
    if (!user?.id || !instanceId) return;
    
    try {
      setLoading(true);
      
      console.log('üîç ========================================');
      console.log('üîç CARREGANDO LEADS DO SUPABASE');
      console.log('üîç ========================================');
      console.log('üîç User ID:', user.id);
      console.log('üîç Instance ID:', instanceId);
      console.log('üîç Filtro de status:', statusFilter || '(nenhum)');
      
      // Buscar leads do Supabase
      const leadsData = await getLeads(user.id, instanceId, {
        status: statusFilter || undefined,
        limit: 1000
      });
      
      console.log('üì• Total de leads recebidos do Supabase:', leadsData.length);
      
      // Mostrar primeiros 5 leads
      console.log('üì• Primeiros 5 leads:');
      leadsData.slice(0, 5).forEach((lead, index) => {
        console.log(`  ${index + 1}. ${lead.lead_name || lead.chat_id} - Status: "${lead.lead_status}"`);
      });
      
      setLeads(leadsData);
      
      // Buscar estat√≠sticas
      const statsData = await getLeadStats(user.id, instanceId);
      setStats(statsData);
      
      console.log('ÔøΩ Estat√≠sticas:', statsData);
      console.log('üîç ========================================');
      
    } catch (error: any) {
      console.error('‚ùå Erro ao carregar leads:', error);
      toast.error('Erro ao carregar leads: ' + (error.message || 'Erro desconhecido'));
    } finally {
      setLoading(false);
    }
  };

  const calculateStats = (leadsData: Lead[]) => {
    const newStats = {
      total: leadsData.length,
      novo: 0,
      qualificado: 0,
      negociacao: 0,
      ganho: 0,
      perdido: 0
    };

    // ‚úÖ COLETAR TODOS OS STATUS √öNICOS PARA DEBUG
    const allStatuses = new Set<string>();
    const statusCount: Record<string, number> = {};

    console.log('üìä ========================================');
    console.log('üìä Calculando estat√≠sticas para', leadsData.length, 'leads');
    console.log('üìä ========================================');

    leadsData.forEach(lead => {
      const statusRaw = lead.lead_status || '';
      const status = (lead.lead_status?.toLowerCase() || '').trim();
      
      // Coletar status √∫nicos
      allStatuses.add(statusRaw);
      statusCount[statusRaw] = (statusCount[statusRaw] || 0) + 1;
      
      console.log('Lead:', lead.lead_name || lead.id, '- Status original:', `"${lead.lead_status}"`, '- Status processado:', `"${status}"`);
      
      // ‚úÖ IMPORTANTE: Se n√£o tem status definido, considerar como "novo"
      if (!status || status === '' || status === 'novo' || status.includes('novo')) {
        newStats.novo++;
        console.log('  ‚û°Ô∏è Contabilizado como NOVO');
      } else if (status === 'qualificado' || status.includes('qualificado')) {
        newStats.qualificado++;
        console.log('  ‚û°Ô∏è Contabilizado como QUALIFICADO');
      } else if (status === 'negociacao' || status === 'negocia√ß√£o' || status.includes('negociacao') || status.includes('negocia√ß√£o')) {
        newStats.negociacao++;
        console.log('  ‚û°Ô∏è Contabilizado como NEGOCIA√á√ÉO');
      } else if (status === 'ganho' || status.includes('ganho')) {
        newStats.ganho++;
        console.log('  ‚û°Ô∏è Contabilizado como GANHO');
      } else if (status === 'perdido' || status.includes('perdido')) {
        newStats.perdido++;
        console.log('  ‚û°Ô∏è Contabilizado como PERDIDO');
      } else {
        // Status desconhecido tamb√©m vai para "novo"
        newStats.novo++;
        console.log('  ‚ö†Ô∏è Status desconhecido:', `"${statusRaw}"`, '- contabilizado como NOVO');
      }
    });

    console.log('üìä ========================================');
    console.log('üìä RESUMO DE TODOS OS STATUS ENCONTRADOS:');
    console.log('üìä ========================================');
    console.table(statusCount);
    console.log('üìä Status √∫nicos:', Array.from(allStatuses).filter(s => s).join(', ') || 'Nenhum status definido');
    console.log('üìä ========================================');
    console.log('üìä Estat√≠sticas calculadas:', newStats);
    console.log('üìä ========================================');
    
    setStats(newStats);
  };

  // Salvar configura√ß√£o de campos
  const handleSaveFieldsConfig = async (config: LeadFieldsConfig) => {
    try {
      // Salvar no localStorage
      localStorage.setItem(`lead_fields_config_${instanceId}`, JSON.stringify(config));
      setFieldsConfig(config);
      
      // Enviar para API
      await updateLeadFieldsMap(config as Record<string, string>, instanceToken!);
      
      toast.success('Configura√ß√£o de campos salva com sucesso!');
      setShowFieldsConfigModal(false);
    } catch (error: any) {
      console.error('Erro ao salvar configura√ß√£o:', error);
      toast.error('Erro ao salvar configura√ß√£o: ' + (error.message || 'Erro desconhecido'));
    }
  };

  // Editar lead
  const handleEditLead = async (leadData: Partial<Lead>) => {
    try {
      console.log('üíæ ========================================');
      console.log('üíæ HANDLEEDITLEAD - Iniciando salvamento');
      console.log('üíæ ========================================');
      console.log('üíæ Dados recebidos do modal:', leadData);
      console.log('üíæ ID do lead:', leadData.id);
      console.log('üíæ Status que ser√° salvo:', leadData.lead_status);
      console.log('üíæ Token da inst√¢ncia:', instanceToken?.substring(0, 15) + '...');
      
      const result = await editLead(leadData as any, instanceToken!);
      
      console.log('üíæ ========================================');
      console.log('üíæ HANDLEEDITLEAD - Resposta recebida');
      console.log('üíæ ========================================');
      console.log('üíæ Resultado completo:', result);
      console.log('üíæ Status retornado:', result?.lead_status);
      console.log('üíæ ========================================');
      
      toast.success('Lead atualizado com sucesso!');
      setShowLeadDetailsModal(false);
      
      // Recarregar lista
      console.log('üíæ ========================================');
      console.log('üíæ Recarregando lista para verificar mudan√ßas...');
      console.log('üíæ Procurando pelo lead:', leadData.id);
      console.log('üíæ Status que DEVERIA aparecer:', leadData.lead_status);
      console.log('üíæ ========================================');
      
      await loadLeads();
      
      // Aguardar um pouco para o estado atualizar
      setTimeout(() => {
        // Verificar se o lead foi atualizado (precisa acessar via fun√ß√£o de callback)
        setLeads(currentLeads => {
          const updatedLead = currentLeads.find(l => l.id === leadData.id);
          if (updatedLead) {
            console.log('üíæ ========================================');
            console.log('üíæ Lead encontrado ap√≥s reload:');
            console.log('üíæ ID:', updatedLead.id);
            console.log('üíæ Nome:', updatedLead.lead_name || updatedLead.wa_name);
            console.log('üíæ Status ATUAL:', updatedLead.lead_status);
            console.log('üíæ Status ESPERADO:', leadData.lead_status);
            console.log('üíæ MATCH:', updatedLead.lead_status === leadData.lead_status ? '‚úÖ SIM' : '‚ùå N√ÉO');
            console.log('üíæ ========================================');
          } else {
            console.warn('‚ö†Ô∏è Lead n√£o encontrado ap√≥s reload! ID:', leadData.id);
          }
          return currentLeads; // N√£o mudar o estado, s√≥ verificar
        });
        console.log('üíæ Lista recarregada com sucesso!');
      }, 500);
    } catch (error: any) {
      console.error('üíæ ========================================');
      console.error('üíæ ERRO NO HANDLEEDITLEAD');
      console.error('üíæ ========================================');
      console.error('üíæ Tipo de erro:', error.constructor.name);
      console.error('üíæ Mensagem:', error.message);
      console.error('üíæ Status HTTP:', error.response?.status);
      console.error('üíæ Dados do erro:', error.response?.data);
      console.error('üíæ Stack:', error.stack);
      console.error('üíæ ========================================');
      toast.error('Erro ao editar lead: ' + (error.message || 'Erro desconhecido'));
    }
  };

  // Filtrar leads por busca
  const filteredLeads = leads.filter(lead => {
    if (!searchTerm) return true;
    
    const search = searchTerm.toLowerCase();
    return (
      lead.lead_name?.toLowerCase().includes(search) ||
      lead.lead_email?.toLowerCase().includes(search) ||
      lead.wa_name?.toLowerCase().includes(search) ||
      lead.wa_contactName?.toLowerCase().includes(search) ||
      lead.phone?.toLowerCase().includes(search) ||
      lead.id?.toLowerCase().includes(search)
    );
  });

  // Agrupar leads por status (para visualiza√ß√£o kanban)
  const groupedLeads = DEFAULT_STATUSES.reduce((acc, status) => {
    acc[status] = filteredLeads.filter(lead => {
      const leadStatus = (lead.lead_status?.toLowerCase() || '').trim();
      
      // ‚úÖ IMPORTANTE: Leads sem status v√£o para "novo"
      if (status === 'novo') {
        return !leadStatus || leadStatus === '' || leadStatus === 'novo';
      }
      
      return leadStatus === status;
    });
    return acc;
  }, {} as Record<string, Lead[]>);

  // Renderizar card de lead
  const renderLeadCard = (lead: Lead) => {
    const displayName = lead.lead_name || lead.wa_contactName || lead.wa_name || 'Sem nome';
    const phoneNumber = lead.phone || lead.id?.split('@')[0] || '';
    const status = lead.lead_status || 'novo';
    const tags = lead.lead_tags || [];

    return (
      <div
        key={lead.id}
        onClick={() => {
          setSelectedLead(lead);
          setShowLeadDetailsModal(true);
        }}
        className="bg-white rounded-lg shadow-sm border border-gray-200 p-4 hover:shadow-md transition-shadow cursor-pointer"
      >
        {/* Avatar e Nome */}
        <div className="flex items-start gap-3 mb-3">
          <div className="w-12 h-12 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 font-semibold">
            {displayName.charAt(0).toUpperCase()}
          </div>
          <div className="flex-1 min-w-0">
            <h3 className="font-semibold text-gray-900 truncate">{displayName}</h3>
            <p className="text-sm text-gray-500 flex items-center gap-1">
              <Phone className="w-3 h-3" />
              {phoneNumber}
            </p>
          </div>
        </div>

        {/* Status */}
        <div className="mb-3">
          <span className={cn(
            "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium",
            status === 'novo' && "bg-blue-100 text-blue-800",
            status === 'qualificado' && "bg-green-100 text-green-800",
            status === 'negociacao' && "bg-yellow-100 text-yellow-800",
            status === 'ganho' && "bg-emerald-100 text-emerald-800",
            status === 'perdido' && "bg-red-100 text-red-800"
          )}>
            {status}
          </span>
        </div>

        {/* Email */}
        {lead.lead_email && (
          <p className="text-sm text-gray-600 flex items-center gap-1 mb-2">
            <Mail className="w-3 h-3" />
            {lead.lead_email}
          </p>
        )}

        {/* Tags */}
        {Array.isArray(tags) && tags.length > 0 && (
          <div className="flex flex-wrap gap-1 mb-2">
            {tags.slice(0, 3).map((tag: string, idx: number) => (
              <span key={idx} className="inline-flex items-center px-2 py-0.5 rounded text-xs bg-gray-100 text-gray-700">
                <Tag className="w-3 h-3 mr-1" />
                {tag}
              </span>
            ))}
            {tags.length > 3 && (
              <span className="text-xs text-gray-500">+{tags.length - 3}</span>
            )}
          </div>
        )}

        {/* Campos personalizados (mostrar 2 primeiros) */}
        <div className="text-xs text-gray-500 space-y-1">
          {Object.keys(fieldsConfig).slice(0, 2).map(fieldKey => {
            const fieldValue = (lead as any)[fieldKey];
            if (!fieldValue) return null;
            
            return (
              <div key={fieldKey} className="truncate">
                <span className="font-medium">{fieldsConfig[fieldKey as keyof LeadFieldsConfig]}:</span> {fieldValue}
              </div>
            );
          })}
        </div>
      </div>
    );
  };

  if (!instanceId || !instanceToken) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="text-center">
          <Users className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Nenhuma inst√¢ncia selecionada</h2>
          <p className="text-gray-600 mb-4">Selecione uma inst√¢ncia para gerenciar leads</p>
          {instances.length > 0 && (
            <button
              onClick={() => setShowInstanceModal(true)}
              className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
            >
              Selecionar Inst√¢ncia
            </button>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 p-4">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Gest√£o de Leads</h1>
              <p className="text-sm text-gray-600 mt-1">
                {stats.total} leads no total
              </p>
            </div>
            {selectedInstance && (
              <div className="px-3 py-1 bg-blue-50 rounded-lg border border-blue-200">
                <span className="text-xs font-medium text-blue-700">
                  {selectedInstance.name}
                </span>
              </div>
            )}
          </div>
          
          <div className="flex items-center gap-2">
            {instances.length > 1 && (
              <button
                onClick={() => setShowInstanceModal(true)}
                className="flex items-center gap-2 px-3 py-2 bg-white hover:bg-gray-50 border border-gray-300 rounded-lg transition-colors text-sm"
                title="Trocar inst√¢ncia"
              >
                <Users className="w-4 h-4" />
                Trocar Inst√¢ncia
              </button>
            )}
            
            <button
              onClick={loadLeads}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              title="Atualizar"
            >
              <RefreshCw className={cn("w-5 h-5 text-gray-600", loading && "animate-spin")} />
            </button>
            
            <button
              onClick={() => setShowFieldsConfigModal(true)}
              className="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
            >
              <Settings className="w-5 h-5" />
              Configurar Campos
            </button>
          </div>
        </div>

        {/* Estat√≠sticas */}
        <div className="grid grid-cols-2 md:grid-cols-6 gap-4 mb-4">
          <div className="bg-gray-50 rounded-lg p-3">
            <div className="text-2xl font-bold text-gray-900">{stats.total}</div>
            <div className="text-xs text-gray-600">Total</div>
          </div>
          <div className="bg-blue-50 rounded-lg p-3">
            <div className="text-2xl font-bold text-blue-600">{stats.novo}</div>
            <div className="text-xs text-blue-600">Novo</div>
          </div>
          <div className="bg-green-50 rounded-lg p-3">
            <div className="text-2xl font-bold text-green-600">{stats.qualificado}</div>
            <div className="text-xs text-green-600">Qualificado</div>
          </div>
          <div className="bg-yellow-50 rounded-lg p-3">
            <div className="text-2xl font-bold text-yellow-600">{stats.negociacao}</div>
            <div className="text-xs text-yellow-600">Negocia√ß√£o</div>
          </div>
          <div className="bg-emerald-50 rounded-lg p-3">
            <div className="text-2xl font-bold text-emerald-600">{stats.ganho}</div>
            <div className="text-xs text-emerald-600">Ganho</div>
          </div>
          <div className="bg-red-50 rounded-lg p-3">
            <div className="text-2xl font-bold text-red-600">{stats.perdido}</div>
            <div className="text-xs text-red-600">Perdido</div>
          </div>
        </div>

        {/* Filtros e Busca */}
        <div className="flex flex-wrap items-center gap-3">
          {/* Busca */}
          <div className="flex-1 min-w-[200px]">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              <input
                type="text"
                placeholder="Buscar por nome, email, telefone..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>

          {/* Filtro de Status */}
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Todos os Status</option>
            {DEFAULT_STATUSES.map(status => (
              <option key={status} value={status}>{status}</option>
            ))}
          </select>

          {/* Modo de Visualiza√ß√£o */}
          <div className="flex items-center gap-1 bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setViewMode('grid')}
              className={cn(
                "p-2 rounded transition-colors",
                viewMode === 'grid' ? "bg-white shadow-sm" : "hover:bg-gray-200"
              )}
              title="Grade"
            >
              <Grid3x3 className="w-4 h-4" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={cn(
                "p-2 rounded transition-colors",
                viewMode === 'list' ? "bg-white shadow-sm" : "hover:bg-gray-200"
              )}
              title="Lista"
            >
              <List className="w-4 h-4" />
            </button>
            <button
              onClick={() => setViewMode('kanban')}
              className={cn(
                "p-2 rounded transition-colors",
                viewMode === 'kanban' ? "bg-white shadow-sm" : "hover:bg-gray-200"
              )}
              title="Kanban"
            >
              <FileText className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      {/* Conte√∫do */}
      <div className="flex-1 overflow-auto p-4">
        {loading ? (
          <div className="flex items-center justify-center h-full">
            <RefreshCw className="w-8 h-8 text-blue-500 animate-spin" />
          </div>
        ) : (
          <>
            {/* Visualiza√ß√£o em Grade */}
            {viewMode === 'grid' && (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                {filteredLeads.map(lead => renderLeadCard(lead))}
              </div>
            )}

            {/* Visualiza√ß√£o em Lista */}
            {viewMode === 'list' && (
              <div className="space-y-2">
                {filteredLeads.map(lead => renderLeadCard(lead))}
              </div>
            )}

            {/* Visualiza√ß√£o Kanban */}
            {viewMode === 'kanban' && (
              <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {DEFAULT_STATUSES.map(status => (
                  <div key={status} className="bg-gray-100 rounded-lg p-3">
                    <h3 className="font-semibold text-gray-900 mb-3 capitalize">
                      {status} ({groupedLeads[status]?.length || 0})
                    </h3>
                    <div className="space-y-2">
                      {groupedLeads[status]?.map(lead => renderLeadCard(lead))}
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Mensagem quando n√£o h√° leads */}
            {filteredLeads.length === 0 && !loading && (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <Users className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                  <h2 className="text-xl font-semibold text-gray-900 mb-2">Nenhum lead encontrado</h2>
                  <p className="text-gray-600">
                    {searchTerm || statusFilter ? 'Tente ajustar os filtros' : 'Comece conversando com seus clientes'}
                  </p>
                </div>
              </div>
            )}
          </>
        )}
      </div>

      {/* Modais */}
      {showInstanceModal && (
        <SelectInstanceModal
          onClose={() => setShowInstanceModal(false)}
          onSelect={(instance: any) => {
            setSelectedInstance(instance);
            setShowInstanceModal(false);
          }}
        />
      )}

      {showFieldsConfigModal && (
        <LeadFieldsConfigModal
          currentConfig={fieldsConfig}
          onSave={handleSaveFieldsConfig}
          onClose={() => setShowFieldsConfigModal(false)}
        />
      )}

      {showLeadDetailsModal && selectedLead && (
        <LeadDetailsModal
          lead={selectedLead}
          fieldsConfig={fieldsConfig}
          onSave={handleEditLead}
          onClose={() => {
            setShowLeadDetailsModal(false);
            setSelectedLead(null);
          }}
        />
      )}
    </div>
  );
}
