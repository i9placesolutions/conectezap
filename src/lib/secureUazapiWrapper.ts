/**
 * WRAPPER SEGURO PARA API UAZAPI
 * 
 * Adiciona camada de seguran√ßa validando ownership de inst√¢ncia
 * antes de TODAS as chamadas √† API UAZAPI.
 * 
 * CR√çTICO: Use SEMPRE este wrapper em vez de uazapiService direto!
 */

import { uazapiService } from '../services/uazapiService';
import { validateInstanceOwnership } from './instanceSync';
import { toast } from 'react-hot-toast';

/**
 * Valida ownership e executa fun√ß√£o da API UAZAPI.
 * 
 * @param instanceToken - Token da inst√¢ncia
 * @param userId - ID do usu√°rio atual
 * @param apiFunction - Fun√ß√£o da API a ser executada
 * @returns Resultado da fun√ß√£o ou erro
 */
async function secureApiCall<T>(
  instanceToken: string,
  userId: string,
  apiFunction: () => Promise<T>
): Promise<T> {
  // Validar ownership da inst√¢ncia
  console.log('üîê Validando ownership da inst√¢ncia...');
  
  const instance = await validateInstanceOwnership(instanceToken, userId);
  
  if (!instance) {
    const error = new Error('üö´ ACESSO NEGADO: Voc√™ n√£o tem permiss√£o para acessar esta inst√¢ncia');
    console.error(error.message);
    toast.error('Acesso negado: inst√¢ncia n√£o autorizada');
    throw error;
  }

  console.log('‚úÖ Ownership validada - executando chamada √† API');
  
  try {
    return await apiFunction();
  } catch (error) {
    console.error('‚ùå Erro na chamada √† API:', error);
    throw error;
  }
}

/**
 * Service SEGURO para chamadas √† API UAZAPI.
 * Todas as fun√ß√µes validam ownership antes de executar.
 */
export const secureUazapiService = {
  /**
   * Busca chats de forma segura
   */
  async searchChatsSecure(
    instanceToken: string,
    userId: string,
    params: any
  ) {
    return secureApiCall(
      instanceToken,
      userId,
      () => uazapiService.searchChats(instanceToken, params)
    );
  },

  /**
   * Busca mensagens de forma segura
   */
  async searchMessagesSecure(
    instanceToken: string,
    userId: string,
    params: any
  ) {
    return secureApiCall(
      instanceToken,
      userId,
      () => uazapiService.searchMessages(instanceToken, params)
    );
  },

  /**
   * Envia mensagem simples de forma segura
   */
  async sendSimpleMessageSecure(
    instanceToken: string,
    userId: string,
    data: any
  ) {
    return secureApiCall(
      instanceToken,
      userId,
      () => uazapiService.sendSimpleMessage(instanceToken, data)
    );
  },

  /**
   * Reage a mensagem de forma segura
   */
  async reactToMessageSecure(
    instanceToken: string,
    userId: string,
    chatId: string,
    messageId: string,
    emoji: string
  ) {
    return secureApiCall(
      instanceToken,
      userId,
      () => uazapiService.reactToMessage(instanceToken, chatId, messageId, emoji)
    );
  },

  /**
   * Envia m√∫ltiplas m√≠dias de forma segura
   */
  async sendMultipleMediaSecure(
    instanceToken: string,
    userId: string,
    chatId: string,
    mediaFiles: Array<{
      id: string;
      file: File;
      type: 'image' | 'video' | 'audio' | 'document';
      caption?: string;
    }>,
    onProgress?: (current: number, total: number, currentFile: string) => void
  ) {
    return secureApiCall(
      instanceToken,
      userId,
      () => uazapiService.sendMultipleMedia(instanceToken, chatId, mediaFiles, onProgress)
    );
  },

  /**
   * Envia mensagem em massa de forma segura
   */
  async sendMassMessageSecure(
    instanceToken: string,
    userId: string,
    data: any
  ) {
    return secureApiCall(
      instanceToken,
      userId,
      () => uazapiService.sendMassMessage(instanceToken, data)
    );
  },

  /**
   * Testa conex√£o da inst√¢ncia de forma segura
   */
  async testInstanceConnectionSecure(
    instanceToken: string,
    userId: string
  ) {
    return secureApiCall(
      instanceToken,
      userId,
      () => uazapiService.testInstanceConnection(instanceToken)
    );
  }
};

/**
 * Hook para usar o service seguro
 */
export function useSecureUazapiService(userId: string | undefined) {
  if (!userId) {
    throw new Error('userId √© obrigat√≥rio para usar o servi√ßo seguro');
  }

  return {
    searchChats: (token: string, params: any) => 
      secureUazapiService.searchChatsSecure(token, userId, params),
    
    searchMessages: (token: string, params: any) =>
      secureUazapiService.searchMessagesSecure(token, userId, params),
    
    sendSimpleMessage: (token: string, data: any) =>
      secureUazapiService.sendSimpleMessageSecure(token, userId, data),
    
    reactToMessage: (token: string, chatId: string, messageId: string, emoji: string) =>
      secureUazapiService.reactToMessageSecure(token, userId, chatId, messageId, emoji),
    
    sendMultipleMedia: (token: string, chatId: string, mediaFiles: any[], onProgress?: any) =>
      secureUazapiService.sendMultipleMediaSecure(token, userId, chatId, mediaFiles, onProgress),
    
    sendMassMessage: (token: string, data: any) =>
      secureUazapiService.sendMassMessageSecure(token, userId, data),
    
    testInstanceConnection: (token: string) =>
      secureUazapiService.testInstanceConnectionSecure(token, userId)
  };
}
