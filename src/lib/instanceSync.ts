import { supabase } from './supabase';
import { getInstances as getUazapiInstances } from './wapi/api';
import { toast } from 'react-hot-toast';

/**
 * SERVI√áO DE SINCRONIZA√á√ÉO DE INST√ÇNCIAS
 * 
 * Garante que todas as inst√¢ncias est√£o registradas no Supabase
 * com o user_id correto para isolamento multi-tenant.
 * 
 * FLUXO DE SEGURAN√áA:
 * 1. Criar inst√¢ncia na API UAZAPI
 * 2. Registrar no Supabase com user_id
 * 3. RLS garante isolamento
 */

export interface SupabaseInstance {
  id: string;
  user_id: string;
  name: string;
  token: string;
  phone_connected?: string;
  status: 'connected' | 'disconnected' | 'connecting';
  is_active: boolean;
  organization_id?: string;
  created_at?: string;
  updated_at?: string;
}

/**
 * Registra uma nova inst√¢ncia no Supabase.
 * DEVE ser chamado imediatamente ap√≥s criar inst√¢ncia na API UAZAPI.
 */
export async function registerInstanceInSupabase(
  instanceData: {
    id: string;
    name: string;
    token: string;
    user_id: string;
    phone_connected?: string;
    status?: 'connected' | 'disconnected' | 'connecting';
    organization_id?: string;
  }
): Promise<SupabaseInstance | null> {
  try {
    console.log('üìù Registrando inst√¢ncia no Supabase:', instanceData.id);

    const { data, error } = await supabase
      .from('instances')
      .insert({
        id: instanceData.id,
        user_id: instanceData.user_id,
        name: instanceData.name,
        token: instanceData.token,
        phone_connected: instanceData.phone_connected || null,
        status: instanceData.status || 'disconnected',
        is_active: true,
        organization_id: instanceData.organization_id || null,
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erro ao registrar inst√¢ncia no Supabase:', error);
      
      // Se for erro de duplicata, tentar atualizar
      if (error.code === '23505') {
        console.log('‚ö†Ô∏è Inst√¢ncia j√° existe, tentando atualizar...');
        return await updateInstanceInSupabase(instanceData.id, {
          name: instanceData.name,
          token: instanceData.token,
          phone_connected: instanceData.phone_connected,
          status: instanceData.status || 'disconnected',
        });
      }
      
      toast.error('Erro ao registrar inst√¢ncia');
      return null;
    }

    console.log('‚úÖ Inst√¢ncia registrada com sucesso no Supabase');
    return data;
  } catch (error) {
    console.error('‚ùå Erro ao registrar inst√¢ncia:', error);
    return null;
  }
}

/**
 * Atualiza dados de uma inst√¢ncia no Supabase.
 */
export async function updateInstanceInSupabase(
  instanceId: string,
  updates: {
    name?: string;
    token?: string;
    phone_connected?: string;
    status?: 'connected' | 'disconnected' | 'connecting';
    is_active?: boolean;
  }
): Promise<SupabaseInstance | null> {
  try {
    console.log('üîÑ Atualizando inst√¢ncia no Supabase:', instanceId);

    const { data, error } = await supabase
      .from('instances')
      .update({
        ...updates,
        updated_at: new Date().toISOString(),
      })
      .eq('id', instanceId)
      .select()
      .single();

    if (error) {
      console.error('‚ùå Erro ao atualizar inst√¢ncia:', error);
      return null;
    }

    console.log('‚úÖ Inst√¢ncia atualizada no Supabase');
    return data;
  } catch (error) {
    console.error('‚ùå Erro ao atualizar inst√¢ncia:', error);
    return null;
  }
}

/**
 * Busca inst√¢ncias do usu√°rio no Supabase (fonte confi√°vel).
 * Esta √© a fun√ß√£o SEGURA que deve ser usada em todo o sistema.
 */
export async function getUserInstancesFromSupabase(
  userId: string
): Promise<SupabaseInstance[]> {
  try {
    console.log('üîç Buscando inst√¢ncias do usu√°rio no Supabase:', userId);

    const { data, error } = await supabase
      .from('instances')
      .select('*')
      .eq('user_id', userId)
      .eq('is_active', true)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå Erro ao buscar inst√¢ncias:', error);
      return [];
    }

    console.log(`‚úÖ Encontradas ${data?.length || 0} inst√¢ncias do usu√°rio`);
    return data || [];
  } catch (error) {
    console.error('‚ùå Erro ao buscar inst√¢ncias:', error);
    return [];
  }
}

/**
 * Sincroniza TODAS as inst√¢ncias da API UAZAPI para o admin.
 * APENAS para rafael@i9place.com.br - bypassa RLS.
 */
export async function syncAllInstancesForAdmin(): Promise<SupabaseInstance[]> {
  try {
    console.log('üëë Sincronizando TODAS as inst√¢ncias da UAZAPI para admin...');

    // 1. Buscar TODAS as inst√¢ncias da API UAZAPI usando admin token
    let apiInstances: any[] = [];
    try {
      apiInstances = await getUazapiInstances();
      console.log(`üìä Encontradas ${apiInstances.length} inst√¢ncias na UAZAPI`);
      console.log('üìã Inst√¢ncias da API:', apiInstances);
    } catch (error) {
      console.error('‚ùå Erro ao buscar inst√¢ncias da API UAZAPI:', error);
      return [];
    }

    if (apiInstances.length === 0) {
      console.warn('‚ö†Ô∏è Nenhuma inst√¢ncia encontrada na API UAZAPI');
      return [];
    }

    // 2. Buscar TODAS as inst√¢ncias do Supabase via RPC admin
    const { data: supabaseInstances, error } = await supabase
      .rpc('get_all_instances_admin', { admin_email: 'rafael@i9place.com.br' });

    if (error) {
      console.error('‚ùå Erro ao buscar inst√¢ncias do Supabase:', error);
      // Continuar mesmo com erro - vamos usar s√≥ as da API
    }

    console.log(`üìä Encontradas ${supabaseInstances?.length || 0} inst√¢ncias no Supabase`);

    // 3. Converter TODAS as inst√¢ncias da API para o formato SupabaseInstance
    const allInstances: SupabaseInstance[] = [];

    for (const apiInstance of apiInstances) {
      console.log(`üîç Processando inst√¢ncia da API: ${apiInstance.name || apiInstance.id}`);
      
      // Encontrar no Supabase se existir
      const supabaseInstance = supabaseInstances?.find(
        (si: any) => si.id === apiInstance.id || si.token === apiInstance.token
      );

      if (supabaseInstance) {
        console.log(`‚úÖ Inst√¢ncia ${apiInstance.id} encontrada no Supabase`);
        // Atualizar status se mudou
        if (apiInstance.status !== supabaseInstance.status) {
          console.log(`üîÑ Status mudou para ${apiInstance.id}: ${supabaseInstance.status} -> ${apiInstance.status}`);
          
          const updated = await updateInstanceInSupabase(apiInstance.id, {
            status: apiInstance.status,
            phone_connected: apiInstance.phoneConnected || supabaseInstance.phone_connected,
          });

          allInstances.push(updated || supabaseInstance);
        } else {
          allInstances.push(supabaseInstance);
        }
      } else {
        console.log(`‚ö†Ô∏è Inst√¢ncia ${apiInstance.id} N√ÉO est√° no Supabase, adicionando da API`);
        // Inst√¢ncia n√£o existe no Supabase, criar objeto tempor√°rio da API
        allInstances.push({
          id: apiInstance.id,
          user_id: '', // Admin pode ver todas, user_id n√£o importa
          name: apiInstance.name || apiInstance.profileName || apiInstance.id,
          token: apiInstance.token || '',
          phone_connected: apiInstance.phoneConnected || '',
          status: apiInstance.status,
          is_active: true,
          organization_id: undefined,
          created_at: undefined,
          updated_at: undefined,
        });
      }
    }

    console.log(`‚úÖ Total de inst√¢ncias para admin: ${allInstances.length}`);
    console.log('üìã Inst√¢ncias finais:', allInstances);
    return allInstances;
  } catch (error) {
    console.error('‚ùå Erro ao sincronizar todas as inst√¢ncias:', error);
    return [];
  }
}

/**
 * Sincroniza status das inst√¢ncias do Supabase com a API UAZAPI.
 * Busca dados do Supabase (seguro) e atualiza status da API.
 */
export async function syncInstancesStatus(
  userId: string
): Promise<SupabaseInstance[]> {
  try {
    console.log('üîÑ Sincronizando status das inst√¢ncias...');

    // 1. Buscar inst√¢ncias do Supabase (fonte segura)
    const supabaseInstances = await getUserInstancesFromSupabase(userId);

    if (supabaseInstances.length === 0) {
      console.log('‚ÑπÔ∏è Usu√°rio n√£o possui inst√¢ncias');
      return [];
    }

    // 2. Buscar status atualizado da API UAZAPI
    let apiInstances: any[] = [];
    try {
      apiInstances = await getUazapiInstances();
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao buscar status da API UAZAPI, usando dados do Supabase');
      return supabaseInstances;
    }

    // 3. Atualizar status no Supabase baseado na API
    const syncedInstances: SupabaseInstance[] = [];

    for (const supabaseInstance of supabaseInstances) {
      // Encontrar inst√¢ncia correspondente na API
      const apiInstance = apiInstances.find(
        api => api.id === supabaseInstance.id || api.token === supabaseInstance.token
      );

      if (apiInstance) {
        // Atualizar status se mudou
        if (apiInstance.status !== supabaseInstance.status) {
          console.log(`üîÑ Status mudou para ${supabaseInstance.id}: ${apiInstance.status}`);
          
          const updated = await updateInstanceInSupabase(supabaseInstance.id, {
            status: apiInstance.status,
            phone_connected: apiInstance.phoneConnected || supabaseInstance.phone_connected,
          });

          syncedInstances.push(updated || supabaseInstance);
        } else {
          syncedInstances.push(supabaseInstance);
        }
      } else {
        // Inst√¢ncia n√£o existe mais na API
        console.warn(`‚ö†Ô∏è Inst√¢ncia ${supabaseInstance.id} n√£o encontrada na API`);
        syncedInstances.push(supabaseInstance);
      }
    }

    console.log('‚úÖ Sincroniza√ß√£o conclu√≠da');
    return syncedInstances;
  } catch (error) {
    console.error('‚ùå Erro ao sincronizar inst√¢ncias:', error);
    // Em caso de erro, retornar inst√¢ncias do Supabase
    return await getUserInstancesFromSupabase(userId);
  }
}

/**
 * Deleta inst√¢ncia do Supabase.
 * Soft delete (marca como inativa).
 */
export async function deleteInstanceFromSupabase(
  instanceId: string
): Promise<boolean> {
  try {
    console.log('üóëÔ∏è Deletando inst√¢ncia do Supabase:', instanceId);

    const { error } = await supabase
      .from('instances')
      .update({ is_active: false, updated_at: new Date().toISOString() })
      .eq('id', instanceId);

    if (error) {
      console.error('‚ùå Erro ao deletar inst√¢ncia:', error);
      return false;
    }

    console.log('‚úÖ Inst√¢ncia deletada do Supabase');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao deletar inst√¢ncia:', error);
    return false;
  }
}

/**
 * Valida se uma inst√¢ncia pertence ao usu√°rio OU se √© super admin.
 * Retorna a inst√¢ncia se v√°lida, null caso contr√°rio.
 */
export async function validateInstanceOwnership(
  instanceIdOrToken: string,
  userId: string,
  userEmail?: string
): Promise<SupabaseInstance | null> {
  try {
    // REGRA ESPECIAL: Super admin pode acessar qualquer inst√¢ncia
    if (userEmail === 'rafael@i9place.com.br') {
      console.log('üëë Super admin - Validando inst√¢ncia sem filtro de user_id');
      
      const { data, error } = await supabase
        .rpc('get_all_instances_admin', { admin_email: userEmail });

      if (error) {
        console.error('‚ùå Erro ao buscar inst√¢ncia (admin):', error);
        return null;
      }

      // Encontrar a inst√¢ncia espec√≠fica
      const instance = data?.find(
        (inst: any) => inst.id === instanceIdOrToken || inst.token === instanceIdOrToken
      );

      if (!instance) {
        console.warn('‚ö†Ô∏è Inst√¢ncia n√£o encontrada');
        return null;
      }

      console.log('‚úÖ Super admin - Acesso autorizado √† inst√¢ncia:', instance.name);
      return instance;
    }

    // Usu√°rios normais: validar ownership
    const { data, error } = await supabase
      .from('instances')
      .select('*')
      .eq('user_id', userId)
      .or(`id.eq.${instanceIdOrToken},token.eq.${instanceIdOrToken}`)
      .eq('is_active', true)
      .maybeSingle();

    if (error) {
      console.error('‚ùå Erro ao validar ownership:', error);
      return null;
    }

    if (!data) {
      console.warn('‚ö†Ô∏è Inst√¢ncia n√£o pertence ao usu√°rio');
      return null;
    }

    return data;
  } catch (error) {
    console.error('‚ùå Erro ao validar ownership:', error);
    return null;
  }
}

/**
 * Busca uma inst√¢ncia espec√≠fica validando ownership.
 */
export async function getInstanceSecure(
  instanceIdOrToken: string,
  userId: string,
  userEmail?: string
): Promise<SupabaseInstance | null> {
  console.log('üîê Buscando inst√¢ncia com valida√ß√£o de seguran√ßa...');
  
  const instance = await validateInstanceOwnership(instanceIdOrToken, userId, userEmail);
  
  if (!instance) {
    console.error('üö´ ACESSO NEGADO: Inst√¢ncia n√£o pertence ao usu√°rio');
    toast.error('Acesso negado: inst√¢ncia n√£o autorizada');
    return null;
  }

  console.log('‚úÖ Acesso autorizado √† inst√¢ncia');
  return instance;
}
